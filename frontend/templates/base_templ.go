// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "helia/internal/domain"

func Base(isLoggedIn bool, content templ.Component, menuItems []domain.SubMenuItem, title string, userName, year string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html lang=\"en\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Head().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<body class=\"flex flex-col h-screen bg-gray-100 text-sm dark:bg-gray-900 dark:text-gray-100\"><!-- Header -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Header(isLoggedIn, userName).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<!-- Secondary Menu (Conditional) -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if isLoggedIn {
			templ_7745c5c3_Err = HeaderMenu().Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, " <div id=\"info-message\" class=\"hidden bg-green-500 text-white rounded flex h-18 text-xl justify-center items-center text-center\"></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<!-- Main Content --><div class=\"flex flex-1\"><!-- Sidebar (Conditional) -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if isLoggedIn {
			templ_7745c5c3_Err = Side_nav(menuItems).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<!-- Content Area --><main id=\"content\" class=\"flex-1 p-4 overflow-hidden text-sm\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = content.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</main></div><!-- Footer content area -->")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Footer(year).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<!-- Theme Toggle Script --><script>\r\n            document.addEventListener('DOMContentLoaded', () => {\r\n                const themeToggle = document.getElementById('theme-toggle');\r\n                const themeIcon = document.getElementById('theme-icon');\r\n                const htmlElement = document.documentElement;\r\n\r\n                console.log(\"Theme toggle script loaded\"); // Debugging\r\n\r\n                // Check for saved theme in localStorage\r\n                const savedTheme = localStorage.getItem('theme');\r\n                console.log(\"Saved theme:\", savedTheme); // Debugging\r\n\r\n                if (savedTheme === 'dark') {\r\n                    htmlElement.classList.add('dark');\r\n                    themeIcon.textContent = '‚òÄÔ∏è';\r\n                } else {\r\n                    htmlElement.classList.remove('dark');\r\n                    themeIcon.textContent = 'üåô';\r\n                }\r\n\r\n                themeToggle.addEventListener('click', () => {\r\n                    console.log(\"Theme toggle button clicked\"); // Debugging\r\n                    if (htmlElement.classList.contains('dark')) {\r\n                        console.log(\"Switching to light mode\"); // Debugging\r\n                        htmlElement.classList.remove('dark');\r\n                        localStorage.setItem('theme', 'light');\r\n                        themeIcon.textContent = 'üåô';\r\n                    } else {\r\n                        console.log(\"Switching to dark mode\"); // Debugging\r\n                        htmlElement.classList.add('dark');\r\n                        localStorage.setItem('theme', 'dark');\r\n                        themeIcon.textContent = '‚òÄÔ∏è';\r\n                    }\r\n                });\r\n                <!-- Active Nav Item Script -->\r\n                    const navItems = document.querySelectorAll('.nav-item');\r\n\r\n                    navItems.forEach(item => {\r\n                        item.addEventListener('click', (e) => {\r\n                            // Remove 'active' class from all nav items\r\n                            navItems.forEach(nav => nav.classList.remove('active'));\r\n                            // Add 'active' class to the clicked nav item\r\n                            e.target.classList.add('active');\r\n                        });\r\n                    });\r\n\r\n                    // Set the initial active nav item based on the current URL\r\n                    const currentPath = window.location.pathname;\r\n                    navItems.forEach(item => {\r\n                        if (item.getAttribute('href') === currentPath) {\r\n                            item.classList.add('active');\r\n                        }\r\n                    });\r\n            });\r\n\r\n        </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
