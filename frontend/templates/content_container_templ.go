// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.833
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "helia/internal/domain"

func ContentContainer(tbl domain.TableData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = Search_Part(tbl).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Table(tbl).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t    document.addEventListener('htmx:afterSwap', (event) => {\n\t        if (event.detail.target.id === 'table') {\n\t            const currentPage = event.detail.xhr.responseURL.match(/page=(\\d+)/);\n\t            if (currentPage) {\n\t                const page = parseInt(currentPage[1], 10);\n\t                document.querySelectorAll('.pagination .page-item').forEach((item) => {\n\t                    item.classList.remove('active');\n\t                });\n\t                const activeLink = document.querySelector(`.pagination .page-link[hx-get*=\"?page=${page}\"]`);\n\t                if (activeLink) {\n\t                    activeLink.closest('.page-item').classList.add('active');\n\t                }\n\t            }\n\t        }\n\t    });\n\t\tfunction toggleSearch(button) {\n\t\t\tconst elements = document.querySelectorAll('.search-input'); // Select all elements with the given class\n\t\t \telements.forEach(element => {\n\t\t\t\telement.style.display = 'none';\n\t\t\t});\n\t\t\tif (button) {\n\t\t\t\tlet searchField = button.previousElementSibling\n\t\t\t\tlet fullId = searchField.id;\n\t\t\t\tlet prefix = \"search-\";\n\t\t\t\tlet prefixLength = prefix.length;\n\t\t\t\tlet thElement;\n\t\t\t\tif (fullId.startsWith(prefix)) {\n\t\t\t\t\tthElement = document.getElementById(fullId.slice(prefixLength));\n\t\t\t\t}\n\t\t\t\tif (searchField) {  \n\t\t\t\t\tif (searchField.style.display === \"none\" || searchField.style.display === \"\") {\n\t\t\t\t\t\t// Show search field, hide caption\n\t\t\t\t\t\tthElement.style.display = 'none';\n\t\t\t\t\t\tsearchField.style.display = 'inline-block';\n\t\t\t\t\t\tsearchField.focus(); // Focus the search field\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Hide search field, show caption\n\t\t\t\t\t\tthElement.style.display = 'inline';\n\t\t\t\t\t\tsearchField.style.display = 'none';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tconsole.error(\"No previous sibling found for search icon.\");\n\t\t\t}\n        }\n\t\t// Function to handle search trigger based on input\n\t\tfunction handleSearch(event, url) {\n\t\t\tlet input = event.target;\n\t\t\tlet query = input.value.trim();\n\t\t\tconsole.log(\"Search query:\", query); // Log the search query for debugging\n\t\t\t//let column = input.closest(\"th\").dataset.column; // Remove this line.\n\n\t\t\t// Check if the Enter key was pressed\n\t\t\tif (event.key === \"Enter\") {\n\t\t\t\tevent.preventDefault(); // Prevent default form submission if needed\n\t\t\t}\n\n\t\t\t// Set hx-get dynamically with the search term\n\t\t\t// input.setAttribute('hx-get', `/filter?search=${encodeURIComponent(query)}`);\n\t\t\t// input.setAttribute('hx-target', '#table-body');\n\t\t\t// input.setAttribute('hx-include', 'this');\n\n\t\t\t// Trigger htmx request on enter key press\n\t\t\tif (event.key === \"Enter\" || event.type === 'keyup'){\n\t\t\tinput.dispatchEvent(new Event('htmx:load'));\n\t\t\t}\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
